version: '3.9'

networks:
  module-network:
    driver: bridge

volumes:
  grafana-data:

services:
  postgres-module:
    container_name: postgres-module
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    restart: always
    volumes:
      - ./data/postgres/data:/var/lib/postgresql/data/
    env_file:
      - ./src/main/resources/secrets.properties
    depends_on:
      - prometheus
    networks:
      - module-network

  module-app:
    container_name: module-app
    image: matconi/gitops-spring
    build: .
    ports:
      - "800:800"
    env_file:
      - ./src/main/resources/secrets.properties
      - ./docker/otel-collector/otel.env
    volumes:
      - ./otel-javaagent.jar:/etc/otel-javaagent.jar
    depends_on:
      - postgres-module
      - prometheus
    networks:
      - module-network

  keycloak:
    image: quay.io/keycloak/keycloak
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command:
      - start-dev
      - --import-realm
      - --http-port=8081
    ports:
      - "8081:8081"
    volumes:
      - /home/keycloak/realm.json:/opt/keycloak/data/import/realm.json
      - ./keycloak_data:/opt/jboss/keycloak/standalone/data/
    depends_on:
      - postgres-module

  otel-collector:
    image: otel/opentelemetry-collector:0.85.0
    container_name: otel-collector
    deploy:
      resources:
        limits:
          memory: 125M
    restart: unless-stopped
    ports:
      - "4317:4317"   # OTEL gRPC
      - "4318:4318"   # OTEL HTTP
      - "8888:8888"   # Opentelemetry-collector metrics
      - "8889:8889"   # Prometheus exporter
      - "13133:13133" # Health check
    volumes:
      - ./docker/otel-collector/config.yml:/etc/otelcol/config.yaml
    networks:
      - module-network

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    ports:
      - "3200:3200"    # tempo
      - "4317"   # otlp grp
    command:
      - -config.file=/etc/tempo.yml
    volumes:
      - ./docker/tempo/tempo.yml:/etc/tempo.yml
    networks:
      - module-network

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - module-network

  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - module-network

  cadvisor-exporter:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor-exporter
    user: root
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - prometheus
    networks:
      - module-network

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres-exporter
    ports:
      - 9187:9187
    env_file:
      - ./src/main/resources/secrets.properties
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable"
    links:
      - postgres-module
      - prometheus
    depends_on:
      - postgres-module
      - prometheus
    networks:
      - module-network